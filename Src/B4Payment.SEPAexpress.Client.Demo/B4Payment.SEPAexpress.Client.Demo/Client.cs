//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace B4Payment.SEPAexpress.Client.Demo
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Creates a new bank account
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateBankAccountHttpResponse> BankAccountsPOSTAsync(CreateBankAccountHttpRequest body)
        {
            return BankAccountsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new bank account
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateBankAccountHttpResponse> BankAccountsPOSTAsync(CreateBankAccountHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/BankAccounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateBankAccountHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of bank accounts
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="iban">Return only objects with this IBAN. Optional</param>
        /// <param name="bic">Return only objects with this BIC. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="countryCode">Return only objects with this country code. Optional</param>
        /// <param name="bankCode">Return only objects with this national bank code. Optional</param>
        /// <param name="branchCode">Return only objects with this national branch code. Optional</param>
        /// <param name="accountNumber">Return only objects with this national account number. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetBankAccountsHttpResponse> BankAccountsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string customerId, string iban, string bic, string currencyCode, string countryCode, string bankCode, string branchCode, string accountNumber, bool? includeCustomer, bool? includeMerchant)
        {
            return BankAccountsGETAsync(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, customerId, iban, bic, currencyCode, countryCode, bankCode, branchCode, accountNumber, includeCustomer, includeMerchant, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of bank accounts
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="iban">Return only objects with this IBAN. Optional</param>
        /// <param name="bic">Return only objects with this BIC. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="countryCode">Return only objects with this country code. Optional</param>
        /// <param name="bankCode">Return only objects with this national bank code. Optional</param>
        /// <param name="branchCode">Return only objects with this national branch code. Optional</param>
        /// <param name="accountNumber">Return only objects with this national account number. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBankAccountsHttpResponse> BankAccountsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string customerId, string iban, string bic, string currencyCode, string countryCode, string bankCode, string branchCode, string accountNumber, bool? includeCustomer, bool? includeMerchant, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/BankAccounts?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bic != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bic") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bic, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (branchCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("branchCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(branchCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (accountNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("accountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBankAccountsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific bank account
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetBankAccountHttpResponse> BankAccountsGET2Async(bool? includeCustomer, bool? includeMerchant, string id)
        {
            return BankAccountsGET2Async(includeCustomer, includeMerchant, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific bank account
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBankAccountHttpResponse> BankAccountsGET2Async(bool? includeCustomer, bool? includeMerchant, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/BankAccounts/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBankAccountHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific connector
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeSchemaConfiguration">Indicates whether the full SchemaConfiguration object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetConnectorHttpResponse> ConnectorsAsync(bool? includeMerchant, bool? includeSchemaConfiguration, string id)
        {
            return ConnectorsAsync(includeMerchant, includeSchemaConfiguration, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific connector
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeSchemaConfiguration">Indicates whether the full SchemaConfiguration object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetConnectorHttpResponse> ConnectorsAsync(bool? includeMerchant, bool? includeSchemaConfiguration, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Connectors/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeSchemaConfiguration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSchemaConfiguration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSchemaConfiguration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConnectorHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of connectors
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="name">Return only objects with this name. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="mandateReviewEnabled">Return only objects if their MandateReviewEnabled is true or false . Optional</param>
        /// <param name="paymentReviewEnabled">Return only objects if their PaymentReviewEnabled is true or false . Optional</param>
        /// <param name="payoutReviewEnabled">Return only objects if their PayoutReviewEnabled is true or false . Optional</param>
        /// <param name="refundReviewEnabled">Return only objects if their RefundReviewEnabled is true or false . Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetConnectorsHttpResponse> Connectors2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string name, bool? includeMerchant, bool? mandateReviewEnabled, bool? paymentReviewEnabled, bool? payoutReviewEnabled, bool? refundReviewEnabled)
        {
            return Connectors2Async(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, name, includeMerchant, mandateReviewEnabled, paymentReviewEnabled, payoutReviewEnabled, refundReviewEnabled, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of connectors
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="name">Return only objects with this name. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="mandateReviewEnabled">Return only objects if their MandateReviewEnabled is true or false . Optional</param>
        /// <param name="paymentReviewEnabled">Return only objects if their PaymentReviewEnabled is true or false . Optional</param>
        /// <param name="payoutReviewEnabled">Return only objects if their PayoutReviewEnabled is true or false . Optional</param>
        /// <param name="refundReviewEnabled">Return only objects if their RefundReviewEnabled is true or false . Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetConnectorsHttpResponse> Connectors2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string name, bool? includeMerchant, bool? mandateReviewEnabled, bool? paymentReviewEnabled, bool? payoutReviewEnabled, bool? refundReviewEnabled, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Connectors?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConnectorsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateCustomerHttpResponse> CustomersPOSTAsync(CreateCustomerHttpRequest body)
        {
            return CustomersPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateCustomerHttpResponse> CustomersPOSTAsync(CreateCustomerHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Customers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateCustomerHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of customers
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetCustomersHttpResponse> CustomersGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, bool? includeMerchant)
        {
            return CustomersGETAsync(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, includeMerchant, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of customers
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetCustomersHttpResponse> CustomersGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, bool? includeMerchant, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Customers?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCustomersHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific customer
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetCustomerHttpResponse> CustomersGET2Async(bool? includeMerchant, string id)
        {
            return CustomersGET2Async(includeMerchant, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific customer
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetCustomerHttpResponse> CustomersGET2Async(bool? includeMerchant, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Customers/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCustomerHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new hosted page
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateHostedPageHttpResponse> HostedPagesPOSTAsync(CreateHostedPageHttpRequest body)
        {
            return HostedPagesPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new hosted page
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateHostedPageHttpResponse> HostedPagesPOSTAsync(CreateHostedPageHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateHostedPageHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of hosted pages
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetHostedPagesHttpResponse> HostedPagesGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, string state, string merchantId, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout)
        {
            return HostedPagesGETAsync(after, before, limit, createdFrom, createdUntil, state, merchantId, includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of hosted pages
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetHostedPagesHttpResponse> HostedPagesGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, string state, string merchantId, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetHostedPagesHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific hosted page
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetHostedPageHttpResponse> HostedPagesGET2Async(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, string id)
        {
            return HostedPagesGET2Async(includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific hosted page
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetHostedPageHttpResponse> HostedPagesGET2Async(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetHostedPageHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View the hosted page
        /// </summary>
        /// <param name="successUrl">The URL to which SEPAexpress should send the customers when the hosted page successfully completed.</param>
        /// <param name="failUrl">The URL to which SEPAexpress should send the customers when the hosted page failed.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ViewAsync(string successUrl, string failUrl, string id)
        {
            return ViewAsync(successUrl, failUrl, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View the hosted page
        /// </summary>
        /// <param name="successUrl">The URL to which SEPAexpress should send the customers when the hosted page successfully completed.</param>
        /// <param name="failUrl">The URL to which SEPAexpress should send the customers when the hosted page failed.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ViewAsync(string successUrl, string failUrl, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages/{id}/View?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (successUrl != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("successUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(successUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (failUrl != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("failUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 302)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("HTTP redirect.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific localizationText
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetLocalizationTextHttpResponse> LocalizationTextsAsync(string merchantId, string languageCode, string countryCode, string key)
        {
            return LocalizationTextsAsync(merchantId, languageCode, countryCode, key, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific localizationText
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetLocalizationTextHttpResponse> LocalizationTextsAsync(string merchantId, string languageCode, string countryCode, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/LocalizationTexts/{key}?");
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (languageCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLocalizationTextHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new mandate
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateMandateHttpResponse> MandatesPOSTAsync(CreateMandateHttpRequest body)
        {
            return MandatesPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new mandate
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateMandateHttpResponse> MandatesPOSTAsync(CreateMandateHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of mandates
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="scheme">Return only objects with this payment scheme. Optional</param>
        /// <param name="reference">Return only objects with this mandate reference. Optional</param>
        /// <param name="type">Return only objects with this mandate type. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetMandatesHttpResponse> MandatesGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string scheme, string reference, string type, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage)
        {
            return MandatesGETAsync(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, connectorId, customerId, bankAccountId, scheme, reference, type, includeCustomer, includeBankAccount, includeMandate, includeConnector, includeMerchant, includeHostedPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of mandates
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="scheme">Return only objects with this payment scheme. Optional</param>
        /// <param name="reference">Return only objects with this mandate reference. Optional</param>
        /// <param name="type">Return only objects with this mandate type. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMandatesHttpResponse> MandatesGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string scheme, string reference, string type, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scheme != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scheme") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMandatesHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific mandate
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetMandateHttpResponse> MandatesGET2Async(bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage, string id)
        {
            return MandatesGET2Async(includeCustomer, includeBankAccount, includeMandate, includeConnector, includeMerchant, includeHostedPage, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific mandate
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMandateHttpResponse> MandatesGET2Async(bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approves a mandate
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApproveMandateHttpResponse> ApproveAsync(string id, ApproveMandateHttpRequest body)
        {
            return ApproveAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approves a mandate
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApproveMandateHttpResponse> ApproveAsync(string id, ApproveMandateHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Approve");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be approved by your request cannot be approved", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new approval Tan and re-sends it via email or sms to the customer
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResendMandateHttpResponse> ResendAsync(string id, ResendMandateHttpRequest body)
        {
            return ResendAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new approval Tan and re-sends it via email or sms to the customer
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResendMandateHttpResponse> ResendAsync(string id, ResendMandateHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Resend");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResendMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Manually accept or reject this mandate
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReviewMandateHttpResponse> ReviewAsync(string id, ReviewMandateHttpRequest body)
        {
            return ReviewAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this mandate
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewMandateHttpResponse> ReviewAsync(string id, ReviewMandateHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Discards a mandate.
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DiscardMandateHttpResponse> DiscardAsync(string id, DiscardMandateHttpRequest body)
        {
            return DiscardAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Discards a mandate.
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DiscardMandateHttpResponse> DiscardAsync(string id, DiscardMandateHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Discard");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DiscardMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be discard by your request cannot be discarded.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reinstates a discarded or expired mandate
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReinstateMandateHttpResponse> ReinstateAsync(string id, ReinstateMandateHttpRequest body)
        {
            return ReinstateAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reinstates a discarded or expired mandate
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReinstateMandateHttpResponse> ReinstateAsync(string id, ReinstateMandateHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Reinstate");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReinstateMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific merchant
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetMerchantHttpResponse> MerchantsAsync(string id)
        {
            return MerchantsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific merchant
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMerchantHttpResponse> MerchantsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Merchants/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMerchantHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of merchants
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetMerchantHttpResponse> Merchants2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state)
        {
            return Merchants2Async(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of merchants
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMerchantHttpResponse> Merchants2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Merchants?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMerchantHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new payment
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreatePaymentHttpResponse> PaymentsPOSTAsync(CreatePaymentHttpRequest body)
        {
            return PaymentsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new payment
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePaymentHttpResponse> PaymentsPOSTAsync(CreatePaymentHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePaymentHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of payments
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="mandateId">Return only objects with this mandate id. Optional</param>
        /// <param name="reference">Return only objects with this payment reference. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPaymentsHttpResponse> PaymentsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string reference, string currencyCode, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage)
        {
            return PaymentsGETAsync(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, connectorId, customerId, bankAccountId, mandateId, reference, currencyCode, includeCustomer, includeBankAccount, includeMandate, includeConnector, includeMerchant, includeHostedPage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of payments
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="mandateId">Return only objects with this mandate id. Optional</param>
        /// <param name="reference">Return only objects with this payment reference. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPaymentsHttpResponse> PaymentsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string reference, string currencyCode, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPaymentsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific payment
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPaymentHttpResponse> PaymentsGET2Async(bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage, string id)
        {
            return PaymentsGET2Async(includeCustomer, includeBankAccount, includeMandate, includeConnector, includeMerchant, includeHostedPage, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific payment
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPaymentHttpResponse> PaymentsGET2Async(bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includeConnector, bool? includeMerchant, bool? includeHostedPage, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPaymentHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Manually accept or reject this payment
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReviewPaymentHttpResponse> Review2Async(string id, ReviewPaymentHttpRequest body)
        {
            return Review2Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this payment
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewPaymentHttpResponse> Review2Async(string id, ReviewPaymentHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewPaymentHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new payout
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreatePayoutHttpResponse> PayoutsPOSTAsync(CreatePayoutHttpRequest body)
        {
            return PayoutsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new payout
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePayoutHttpResponse> PayoutsPOSTAsync(CreatePayoutHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePayoutHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of payouts
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="reference">Return only objects with this payout reference. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPayoutsHttpResponse> PayoutsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string reference, string currencyCode, bool? includeCustomer, bool? includeBankAccount, bool? includeConnector, bool? includeMerchant)
        {
            return PayoutsGETAsync(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, connectorId, customerId, bankAccountId, reference, currencyCode, includeCustomer, includeBankAccount, includeConnector, includeMerchant, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of payouts
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="reference">Return only objects with this payout reference. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPayoutsHttpResponse> PayoutsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string reference, string currencyCode, bool? includeCustomer, bool? includeBankAccount, bool? includeConnector, bool? includeMerchant, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPayoutsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific payout
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPayoutHttpResponse> PayoutsGET2Async(bool? includeCustomer, bool? includeBankAccount, bool? includeConnector, bool? includeMerchant, string id)
        {
            return PayoutsGET2Async(includeCustomer, includeBankAccount, includeConnector, includeMerchant, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific payout
        /// </summary>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPayoutHttpResponse> PayoutsGET2Async(bool? includeCustomer, bool? includeBankAccount, bool? includeConnector, bool? includeMerchant, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPayoutHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Manually accept or reject this payout
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReviewPayoutHttpResponse> Review3Async(string id, ReviewPayoutHttpRequest body)
        {
            return Review3Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this payout
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewPayoutHttpResponse> Review3Async(string id, ReviewPayoutHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewPayoutHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific reconciliation
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetReconciliationHttpResponse> ReconciliationsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, string id)
        {
            return ReconciliationsAsync(includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific reconciliation
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetReconciliationHttpResponse> ReconciliationsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Reconciliations/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetReconciliationHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of reconciliations
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="entity">Return only objects for this entity. Optional</param>
        /// <param name="iban">Return only objects with this IBAN. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="reference">Return only objects with this reference. Optional</param>
        /// <param name="idempotencyKey">Return only objects with this IdempotencyKey. Optional</param>
        /// <param name="bookingDateFrom">Return only objects which were booked from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="bookingDateUntil">Return only objects which were booked until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="cause">Return only objects with this cause. Optional</param>
        /// <param name="scheme">Return only objects with this payment scheme. Optional</param>
        /// <param name="reasonCode">Return only objects with this reason code. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetReconciliationsHttpResponse> Reconciliations2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string entity, string iban, string currencyCode, string reference, string idempotencyKey, System.DateTimeOffset? bookingDateFrom, System.DateTimeOffset? bookingDateUntil, string cause, string scheme, string reasonCode, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout)
        {
            return Reconciliations2Async(after, before, limit, createdFrom, createdUntil, state, merchantId, connectorId, customerId, bankAccountId, mandateId, paymentId, refundId, payoutId, entity, iban, currencyCode, reference, idempotencyKey, bookingDateFrom, bookingDateUntil, cause, scheme, reasonCode, includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of reconciliations
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="entity">Return only objects for this entity. Optional</param>
        /// <param name="iban">Return only objects with this IBAN. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="reference">Return only objects with this reference. Optional</param>
        /// <param name="idempotencyKey">Return only objects with this IdempotencyKey. Optional</param>
        /// <param name="bookingDateFrom">Return only objects which were booked from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="bookingDateUntil">Return only objects which were booked until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="cause">Return only objects with this cause. Optional</param>
        /// <param name="scheme">Return only objects with this payment scheme. Optional</param>
        /// <param name="reasonCode">Return only objects with this reason code. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetReconciliationsHttpResponse> Reconciliations2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string entity, string iban, string currencyCode, string reference, string idempotencyKey, System.DateTimeOffset? bookingDateFrom, System.DateTimeOffset? bookingDateUntil, string cause, string scheme, string reasonCode, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Reconciliations?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idempotencyKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idempotencyKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idempotencyKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bookingDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bookingDateFrom") + "=").Append(System.Uri.EscapeDataString(bookingDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bookingDateUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bookingDateUntil") + "=").Append(System.Uri.EscapeDataString(bookingDateUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cause != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cause") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cause, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scheme != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scheme") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reasonCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reasonCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reasonCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetReconciliationsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new refund
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateRefundHttpResponse> RefundsPOSTAsync(CreateRefundHttpRequest body)
        {
            return RefundsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new refund
        /// </summary>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateRefundHttpResponse> RefundsPOSTAsync(CreateRefundHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateRefundHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be create by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of refunds
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="mandateId">Return only objects with this mandate id. Optional</param>
        /// <param name="paymentId">Return only objects with this payment id. Optional</param>
        /// <param name="reference">Return only objects with this Refund reference. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetRefundsHttpResponse> RefundsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string reference, string currencyCode, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment)
        {
            return RefundsGETAsync(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, merchantId, connectorId, customerId, bankAccountId, mandateId, paymentId, reference, currencyCode, includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of refunds
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional</param>
        /// <param name="customerId">Return only objects with this customer id. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional</param>
        /// <param name="mandateId">Return only objects with this mandate id. Optional</param>
        /// <param name="paymentId">Return only objects with this payment id. Optional</param>
        /// <param name="reference">Return only objects with this Refund reference. Optional</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetRefundsHttpResponse> RefundsGETAsync(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string reference, string currencyCode, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRefundsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific refund
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetRefundHttpResponse> RefundsGET2Async(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, string id)
        {
            return RefundsGET2Async(includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific refund
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetRefundHttpResponse> RefundsGET2Async(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRefundHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Manually accept or reject this refund
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReviewRefundHttpResponse> Review4Async(string id, ReviewRefundHttpRequest body)
        {
            return Review4Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this refund
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewRefundHttpResponse> Review4Async(string id, ReviewRefundHttpRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewRefundHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific process
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetProcessHttpResponse> ProcessesAsync(string id)
        {
            return ProcessesAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific process
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessHttpResponse> ProcessesAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Processes/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of processs
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="type">Return only objects with this type. Optional</param>
        /// <param name="origin">Return only objects with this origin. Optional</param>
        /// <param name="name">Return only objects with this name. Optional</param>
        /// <param name="className">Return only objects with this classname. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetProcessesHttpResponse> Processes2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string type, string origin, string name, string className)
        {
            return Processes2Async(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, type, origin, name, className, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of processs
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="type">Return only objects with this type. Optional</param>
        /// <param name="origin">Return only objects with this origin. Optional</param>
        /// <param name="name">Return only objects with this name. Optional</param>
        /// <param name="className">Return only objects with this classname. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessesHttpResponse> Processes2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string type, string origin, string name, string className, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Processes?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (className != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("className") + "=").Append(System.Uri.EscapeDataString(ConvertToString(className, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessesHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific ProcessEvent
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetProcessEventHttpResponse> ProcessEventsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, string id)
        {
            return ProcessEventsAsync(includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, includeReconciliation, includeProcess, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific ProcessEvent
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessEventHttpResponse> ProcessEventsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/ProcessEvents/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessEventHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of ProcessEvents
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 10. Maximum of 50. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this ProcessId. Optional</param>
        /// <param name="type">Return only objects of this type. Optional</param>
        /// <param name="origin">Return only objects with this origin. Optional</param>
        /// <param name="cause">Return only objects with this cause. Optional</param>
        /// <param name="reasonCode">Return only objects with this reason code. Optional</param>
        /// <param name="trigger">Return only objects with this trigger. Optional</param>
        /// <param name="token">Return only objects with this token. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetProcessEventsHttpResponse> ProcessEvents2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string reconciliationId, string processId, string type, string origin, string cause, string reasonCode, string trigger, string token, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess)
        {
            return ProcessEvents2Async(after, before, limit, createdFrom, createdUntil, merchantId, connectorId, customerId, bankAccountId, mandateId, paymentId, refundId, payoutId, reconciliationId, processId, type, origin, cause, reasonCode, trigger, token, includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, includeReconciliation, includeProcess, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of ProcessEvents
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 10. Maximum of 50. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this ProcessId. Optional</param>
        /// <param name="type">Return only objects of this type. Optional</param>
        /// <param name="origin">Return only objects with this origin. Optional</param>
        /// <param name="cause">Return only objects with this cause. Optional</param>
        /// <param name="reasonCode">Return only objects with this reason code. Optional</param>
        /// <param name="trigger">Return only objects with this trigger. Optional</param>
        /// <param name="token">Return only objects with this token. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessEventsHttpResponse> ProcessEvents2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string reconciliationId, string processId, string type, string origin, string cause, string reasonCode, string trigger, string token, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/ProcessEvents?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reconciliationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reconciliationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reconciliationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cause != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cause") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cause, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reasonCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reasonCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reasonCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trigger != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trigger") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trigger, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (token != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessEventsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific webhook
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWebhookHttpResponse> WebhooksAsync(string id)
        {
            return WebhooksAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific webhook
        /// </summary>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookHttpResponse> WebhooksAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Webhooks/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of webhooks
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWebhooksHttpResponse> Webhooks2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string url)
        {
            return Webhooks2Async(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, state, url, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of webhooks
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhooksHttpResponse> Webhooks2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, string state, string url, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Webhooks?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (url != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("url") + "=").Append(System.Uri.EscapeDataString(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhooksHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific webhookEvent
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWebhookEventHttpResponse> WebhookEventsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, string id)
        {
            return WebhookEventsAsync(includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, includeReconciliation, includeProcess, includeProcessEvent, includeWebhook, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific webhookEvent
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventHttpResponse> WebhookEventsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEvents/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of webhookEvents
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="isSuccessfullyTransmitted">Is Webhook event Successfully Transmitted</param>
        /// <param name="transmissionCount">count of transmissions</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this processId. Optional</param>
        /// <param name="processEventId">Return only objects with this processEventId. Optional</param>
        /// <param name="webhookId">Return only objects with this webhookId. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWebhookEventsHttpResponse> WebhookEvents2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, bool? isSuccessfullyTransmitted, int? transmissionCount, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string reconciliationId, string processId, string processEventId, string webhookId, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook)
        {
            return WebhookEvents2Async(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, isSuccessfullyTransmitted, transmissionCount, merchantId, connectorId, customerId, bankAccountId, mandateId, paymentId, refundId, payoutId, reconciliationId, processId, processEventId, webhookId, includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, includeReconciliation, includeProcess, includeProcessEvent, includeWebhook, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of webhookEvents
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="isSuccessfullyTransmitted">Is Webhook event Successfully Transmitted</param>
        /// <param name="transmissionCount">count of transmissions</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this processId. Optional</param>
        /// <param name="processEventId">Return only objects with this processEventId. Optional</param>
        /// <param name="webhookId">Return only objects with this webhookId. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventsHttpResponse> WebhookEvents2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, bool? isSuccessfullyTransmitted, int? transmissionCount, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string reconciliationId, string processId, string processEventId, string webhookId, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEvents?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isSuccessfullyTransmitted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isSuccessfullyTransmitted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isSuccessfullyTransmitted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (transmissionCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transmissionCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transmissionCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reconciliationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reconciliationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reconciliationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processEventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processEventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processEventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webhookId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a specific webhookEventTransmission
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <param name="includeWebhookEvent">Indicates whether the full WebhookEvent object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWebhookEventTransmissionHttpResponse> WebhookEventTransmissionsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, bool? includeWebhookEvent, string id)
        {
            return WebhookEventTransmissionsAsync(includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, includeReconciliation, includeProcess, includeProcessEvent, includeWebhook, includeWebhookEvent, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific webhookEventTransmission
        /// </summary>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <param name="includeWebhookEvent">Indicates whether the full WebhookEvent object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventTransmissionHttpResponse> WebhookEventTransmissionsAsync(bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, bool? includeWebhookEvent, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEventTransmissions/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhookEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhookEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhookEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventTransmissionHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a cursor paged list of webhookEventTransmissions
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 10. Maximum of 50. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="statusCode">Return only objects with this statusCode. Optional</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this processId. Optional</param>
        /// <param name="processEventId">Return only objects with this processEventId. Optional</param>
        /// <param name="webhookId">Return only objects with this webhookId. Optional</param>
        /// <param name="webhookEventId">Return only objects with this webhookEventId. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <param name="includeWebhookEvent">Indicates whether the full WebhookEvent object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWebhookEventTransmissionsHttpResponse> WebhookEventTransmissions2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, int? statusCode, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string reconciliationId, string processId, string processEventId, string webhookId, string webhookEventId, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, bool? includeWebhookEvent)
        {
            return WebhookEventTransmissions2Async(after, before, limit, createdFrom, createdUntil, lastModifiedFrom, lastModifiedUntil, statusCode, merchantId, connectorId, customerId, bankAccountId, mandateId, paymentId, refundId, payoutId, reconciliationId, processId, processEventId, webhookId, webhookEventId, includeMerchant, includeConnector, includeCustomer, includeBankAccount, includeMandate, includePayment, includeRefund, includePayout, includeReconciliation, includeProcess, includeProcessEvent, includeWebhook, includeWebhookEvent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of webhookEventTransmissions
        /// </summary>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 10. Maximum of 50. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="statusCode">Return only objects with this statusCode. Optional</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this processId. Optional</param>
        /// <param name="processEventId">Return only objects with this processEventId. Optional</param>
        /// <param name="webhookId">Return only objects with this webhookId. Optional</param>
        /// <param name="webhookEventId">Return only objects with this webhookEventId. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bankaccount object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <param name="includeWebhookEvent">Indicates whether the full WebhookEvent object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventTransmissionsHttpResponse> WebhookEventTransmissions2Async(string after, string before, int? limit, System.DateTimeOffset? createdFrom, System.DateTimeOffset? createdUntil, System.DateTimeOffset? lastModifiedFrom, System.DateTimeOffset? lastModifiedUntil, int? statusCode, string merchantId, string connectorId, string customerId, string bankAccountId, string mandateId, string paymentId, string refundId, string payoutId, string reconciliationId, string processId, string processEventId, string webhookId, string webhookEventId, bool? includeMerchant, bool? includeConnector, bool? includeCustomer, bool? includeBankAccount, bool? includeMandate, bool? includePayment, bool? includeRefund, bool? includePayout, bool? includeReconciliation, bool? includeProcess, bool? includeProcessEvent, bool? includeWebhook, bool? includeWebhookEvent, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEventTransmissions?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (statusCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("statusCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(statusCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reconciliationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reconciliationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reconciliationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processEventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processEventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processEventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webhookId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webhookEventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookEventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookEventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhookEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhookEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhookEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventTransmissionsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBankAccountHttpRequest
    {
        /// <summary>
        /// The unique identifier of the customer this bank account object belongs to.
        /// <br/>Mandatory, unless a new customer to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateCustomerHttpRequest Customer { get; set; } = new CreateCustomerHttpRequest();

        /// <summary>
        /// Account holder’s given name. Optional. Will be derived from
        /// <br/>customer's given name, when not filled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountHolder")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// The ISO 13616 international bank account number. Optional when nested in hosted page.
        /// <br/>For most countries, especially in the SEPA area, using the iban is
        /// <br/>the preferred way to specify a bank account. Alternatively the
        /// <br/>country code and the national fields can be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 15)]
        public string Iban { get; set; }

        /// <summary>
        /// The ISO 9362 business identifier code. Optional
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?)$")]
        public string Bic { get; set; }

        /// <summary>
        /// The ISO 4217 currency code. Optional. Will be derived from the
        /// <br/>bank account iban when not filled and iban is present.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code. Optional. Will be derived
        /// <br/>from the bank account iban when not filled and iban is present.
        /// <br/>Otherwise mandatory to define the national fields to use.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The national bank code. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// <br/>Optional. Mandatory when iban is empty and national
        /// <br/>regulations require the field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BankCode { get; set; }

        /// <summary>
        /// The national branch code. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// <br/>Optional. Mandatory when iban is empty and national
        /// <br/>regulations require the field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("branchCode")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BranchCode { get; set; }

        /// <summary>
        /// The national account number. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// <br/>Optional. Mandatory when iban is empty and national
        /// <br/>regulations require the field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(14, MinimumLength = 1)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request DTO for the CreateCustomer request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCustomerHttpRequest
    {
        /// <summary>
        /// The unique identifier of the merchant this customer object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Customer’s salutation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salutation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Salutation { get; set; }

        /// <summary>
        /// Customer’s given name. Required unless a company name is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("givenName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string GivenName { get; set; }

        /// <summary>
        /// Customer’s family name. Required unless a company name is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Customer’s company name. Required unless a given name and family name are provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The first line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine1")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine2")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine3")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The postal code of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string City { get; set; }

        /// <summary>
        /// The address region, county or department of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("region")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Region { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// ISO 639-1 code. Used as the language for notification emails sent by SEPAexpress if
        /// <br/>your organisation does not send its own (see compliance requirements). Currently
        /// <br/>only “en”, “fr”, “de” are supported.
        /// <br/>Defaults to the country code of the address or "en" if not supported
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("languageCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Customer’s email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\A(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)\Z")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Customer’s telephone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("telephone")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Telephone { get; set; }

        /// <summary>
        /// Customer’s cellphone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cellphone")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Cellphone { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request DTO for the CreateHostedPage request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateHostedPageHttpRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateMandateHttpRequest Mandate { get; set; } = new CreateMandateHttpRequest();

        /// <summary>
        /// The type of this hosted page. One of:
        /// <br/>* createMandate -     The hosted page is used to create a mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Type { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the connector this object belongs to.
        /// <br/>Optional. Mandatory if the associated merchant has more than
        /// <br/>one matching connector configured for the determined payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this mandate object belongs to.
        /// <br/>Mandatory, unless a new bank account to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateBankAccountHttpRequest BankAccount { get; set; } = new CreateBankAccountHttpRequest();

        /// <summary>
        /// The Direct Debit payment scheme this mandate and all dependent
        /// <br/>payments belong to. Optional. Will be derived from linked
        /// <br/>bank account when not filled. One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Scheme { get; set; }

        /// <summary>
        /// The unique reference of this mandate. Length and format dependent
        /// <br/>on regulations defined by the determined payment scheme. Optional.
        /// <br/>SEPAexpress will generate a unique reference satisfying the
        /// <br/>different scheme requirements if this field is not filled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The type of this mandate. Optional. One of:
        /// <br/>* single - The mandate can be used for a single payment. It will expire after the first payment or after a period
        /// <br/>of dormancy as defined by the payment scheme. 
        /// <br/>* recurring - The mandate can be used for an unlimited number of payments. It will expire after a period of
        /// <br/>dormancy as defined by the payment scheme. This is the default.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Type { get; set; }

        /// <summary>
        /// Optional. Mark this mandate as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* click - Click mandate. The mandate is approved by ticking a check box and/or clicking an approve button on the web page.
        /// <br/>* email - Email mandate. The customer is sent an email containing a secret Tan and/or a link to click. The customer
        /// <br/>email address has to be filled.
        /// <br/>* sms - SMS mandate. The customer is sent a sms containing a secret Tan. The customer cellphone number has to be
        /// <br/>filled.
        /// <br/>* ais - Account Information Service mandate. The mandate is approved by using a PSD2 AIS account check via the internet
        /// <br/>banking of the customer's bank. When the amount and currency are also given in this request an additional balance check
        /// <br/>is executed.
        /// <br/>* dynamic - Dynamic mandate management. The mandate type is managed by SEPA.express based on configured parameters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(click|sms|email|ais|dynamic)$")]
        public string ApprovalBy { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// ApprovalDate is an optional field that indicates when the mandate was signed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]
        public System.DateTimeOffset? ApprovalDate { get; set; }

        /// <summary>
        /// The ISO 4217 currency code. used mainly for AIS mandate with Balance Check
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The max allowable amount to collect from the customer's bank account for this mandate.
        /// <br/>Specified in the smallest subunit of the used currency, e.g. cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveMandateHttpRequest
    {
        /// <summary>
        /// The Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The approval Tan
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tan")]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string Tan { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResendMandateHttpRequest
    {
        /// <summary>
        /// The Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* accept - Accept the creation of this mandate
        /// <br/>* reject - Reject the creation of this mandate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(accept|reject)$")]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscardMandateHttpRequest
    {
        /// <summary>
        /// The Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReinstateMandateHttpRequest
    {
        /// <summary>
        /// The Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePaymentHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate this payment object belongs to.
        /// <br/>Mandatory, unless a new mandate to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateMandateHttpRequest Mandate { get; set; } = new CreateMandateHttpRequest();

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to collect from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The unique reference of this payment. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme. Often called End2EndId in the SEPA scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payment. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme. Optional. SEPAexpress will
        /// <br/>generate a scheme compliant soft descriptor, when left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this payment should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payments will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding iban from the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]
        public string ValidationMerchantId { get; set; }

        /// <summary>
        /// Optional. Mark this payment as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* ais - Account Information Dienste (kontoinformationsdienste - KID) mandate. The customer is redirected to his selected bank login and after successful authorization he gets redirected back to merchant site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(ais)$")]
        public string ApprovalBy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewPaymentHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payment object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* accept - Accept the creation of this payment
        /// <br/>* reject - Reject the creation of this payment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(accept|reject)$")]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePayoutHttpRequest
    {
        /// <summary>
        /// The unique identifier of the connector this object belongs to.
        /// <br/>Optional. Mandatory if the associated merchant has more than
        /// <br/>one matching connector configured for the determined payout scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this payout object belongs to.
        /// <br/>Mandatory, unless a new bank account to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateBankAccountHttpRequest BankAccount { get; set; } = new CreateBankAccountHttpRequest();

        /// <summary>
        /// The Direct Debit payment scheme this mandate and all dependent
        /// <br/>payments belong to. Optional. Will be derived from linked
        /// <br/>bank account when not filled. One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to pay to the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this payment. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme. Often called End2EndId in the SEPA scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payout. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payout scheme. Optional. SEPAexpress will
        /// <br/>generate a scheme compliant soft descriptor, when left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this payout should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payouts will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding iban from the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewPayoutHttpRequest
    {
        /// <summary>
        /// The Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* accept - Accept the creation of this payout
        /// <br/>* reject - Reject the creation of this payout
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(accept|reject)$")]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRefundHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payment this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to collect from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR. Optional. The entire remaining refundable
        /// <br/>amount of the associated payment will be refunded, if empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The soft descriptor for this refund. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme. Optional. SEPAexpress will
        /// <br/>generate a scheme compliant soft descriptor, when left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this refund should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Refunds will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewRefundHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payment object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* accept - Accept the creation of this refund
        /// <br/>* reject - Reject the creation of this refund
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBankAccountHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a bank account object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccount
    {
        /// <summary>
        /// The unique identifier of this bank account object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this bank account object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the customer this bank account object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this bank account object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The bank account is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this bank account object gets active.
        /// <br/>* active - The bank account has been successfully set up.
        /// <br/>* failed - The bank account could not be set up.
        /// <br/>* discarded - The bank account has been discarded.
        /// <br/>* expired - The bank account has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// Account holder’s company name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountHolder")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// The ISO 13616 international bank account number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 15)]
        public string Iban { get; set; }

        /// <summary>
        /// The ISO 9362 business identifier code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?)$")]
        public string Bic { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The national bank code. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BankCode { get; set; }

        /// <summary>
        /// The national branch code. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("branchCode")]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BranchCode { get; set; }

        /// <summary>
        /// The national account number. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(14, MinimumLength = 1)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a merchant object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Merchant
    {
        /// <summary>
        /// The unique identifier of this merchant object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this merchant object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The merchant is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this merchant object gets active.
        /// <br/>* pendingOnboarding - The onboarding for the merchant is pending.
        /// <br/>* pendingGoLive - The go live for the merchant is pending.
        /// <br/>* active - The merchant has been successfully set up.
        /// <br/>* failed - The merchant could not be set up.
        /// <br/>* discarded - The merchant has been discarded.
        /// <br/>* expired - The merchant has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// Merchant's name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// Configuration for the merchant
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("configuration")]
        public string Configuration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a customer object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {
        /// <summary>
        /// The unique identifier of this customer object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this customer object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this customer object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The customer is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this customer object gets active.
        /// <br/>* active - The customer has been successfully set up.
        /// <br/>* failed - The customer could not be set up.
        /// <br/>* discarded - The customer has been discarded.
        /// <br/>* expired - The customer has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// Customer’s salutation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salutation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Salutation { get; set; }

        /// <summary>
        /// Customer’s given name. Required unless a company name is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("givenName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string GivenName { get; set; }

        /// <summary>
        /// Customer’s family name. Required unless a company name is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Customer’s company name. Required unless a given name and family name are provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The first line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine1")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine2")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine3")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The postal code of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string City { get; set; }

        /// <summary>
        /// The address region, county or department of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("region")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Region { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// ISO 639-1 code. Used as the language for notification emails sent by SEPAexpress if
        /// <br/>your organisation does not send its own (see compliance requirements). Currently
        /// <br/>only “en”, “fr”, “de” are supported.
        /// <br/>Defaults to the country code of the address or "en" if not supported
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("languageCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Customer’s email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\A(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)\Z")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Customer’s telephone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("telephone")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Telephone { get; set; }

        /// <summary>
        /// Customer’s cellphone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cellphone")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Cellphone { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for an erroneous request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required]
        public Error Error { get; set; } = new Error();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of an error object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The unique identifier of this object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The status code of this error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Message { get; set; }

        /// <summary>
        /// The reason code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The cause.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]
        public string Cause { get; set; }

        /// <summary>
        /// The trigger.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trigger")]
        public string Trigger { get; set; }

        /// <summary>
        /// The token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// The description.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The action.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// The best practice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bestPractice")]
        public string BestPractice { get; set; }

        /// <summary>
        /// List of error details.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public System.Collections.Generic.ICollection<ErrorDetail> Details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of an error detail object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// The error detail message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Message { get; set; }

        /// <summary>
        /// List of fields.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged bank account list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBankAccountsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of bank accounts.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccounts")]
        public System.Collections.Generic.ICollection<BankAccount> BankAccounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Paging meta data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CursorPagedMeta
    {
        /// <summary>
        /// The unique identifier of the first item that has been returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("before")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Before { get; set; }

        /// <summary>
        /// The unique identifier of the last item that has been returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("after")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string After { get; set; }

        /// <summary>
        /// The upper bound placed on the number of items returned. If there were not enough 
        /// <br/>remaining items in the list of data then fewer than this number will have been returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetBankAccount request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBankAccountHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        public BankAccount BankAccount { get; set; } = new BankAccount();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetConnector request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetConnectorHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        [System.ComponentModel.DataAnnotations.Required]
        public Connector Connector { get; set; } = new Connector();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a connector object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Connector
    {
        /// <summary>
        /// The unique identifier of this connector object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this connector object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this connector object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The connector is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this connector object gets active.
        /// <br/>* pendingOnboarding - The onboarding for the merchant is pending.
        /// <br/>* active - The connector has been successfully set up.
        /// <br/>* failed - The connector could not be set up.
        /// <br/>* discarded - The connector has been discarded.
        /// <br/>* expired - The connector has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// The name of this connector object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The payment scheme this connector belongs to. Optional.
        /// <br/>Will be derived from the linked settlement IBAN when not filled.
        /// <br/>One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Scheme { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* payment - The connector is used to collect payments from customers.
        /// <br/>* payout - The connector is used to payout money to customers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// Optional. One of:
        /// <br/>* generate - mandate documents will be generated for newly created payment mandates.
        /// <br/>* archive - mandate documents will be generated and archived for newly created payment mandates.
        /// <br/>* send - mandate documents will be generated, archived and sent to the customer for newly created payment mandates.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateHandling")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string MandateHandling { get; set; }

        /// <summary>
        /// Optional. One of:
        /// <br/>* generate - mandate setup confirmation documents will be generated for newly created payment mandates.
        /// <br/>* archive - mandate setup confirmation documents will be generated and archived for newly created payment mandates.
        /// <br/>created payment mandates.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateSetupConfirmationHandling")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string MandateSetupConfirmationHandling { get; set; }

        /// <summary>
        /// Optional. One of:
        /// <br/>* generate - payment pre notification documents will be generated for newly created payments.
        /// <br/>* archive - payment pre notification documents will be generated and archived for newly created payments.
        /// <br/>* send - payment pre notification documents will be generated, archived and sent to the customer for newly created
        /// <br/>payments.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentPreNotificationHandling")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string PaymentPreNotificationHandling { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandateReviewEnabled")]
        public bool? MandateReviewEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentReviewEnabled")]
        public bool? PaymentReviewEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payoutReviewEnabled")]
        public bool? PayoutReviewEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refundReviewEnabled")]
        public bool? RefundReviewEnabled { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("schemaConfiguration")]
        public SepaConfiguration SchemaConfiguration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SepaConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("creditorId")]
        public string CreditorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentProcessorName")]
        public string PaymentProcessorName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payoutProcessorName")]
        public string PayoutProcessorName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refundProcessorName")]
        public string RefundProcessorName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refundQueuingDays")]
        public int? RefundQueuingDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("debtCollection")]
        public bool? DebtCollection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfig")]
        public EmailConfig EmailConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("smsConfig")]
        public SmsConfig SmsConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("riskCheckConfiguration")]
        public RiskCheckConfiguration RiskCheckConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pspName")]
        public string PspName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("b4PId")]
        public string B4PId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCompanyDirectDebit")]
        public bool? IsCompanyDirectDebit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enforceAis")]
        public bool? EnforceAis { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aisConfiguration")]
        public AisConfiguration AisConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostedPagesConfiguration")]
        public HostedPagesConfigurationDto HostedPagesConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenIoConfig")]
        public TokenIoConfig TokenIoConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("finTsConfig")]
        public FinTsConfig FinTsConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dynamicMandateConfiguration")]
        public DynamicMandateConfigurationDto DynamicMandateConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("templateConfiguration")]
        public TemplateConfiguration TemplateConfiguration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("fromName")]
        public string FromName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromEmail")]
        public string FromEmail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmsConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("fromName")]
        public string FromName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskCheckConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandateMinAmount")]
        public int? MandateMinAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandateMaxAmount")]
        public int? MandateMaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentMinAmount")]
        public int? PaymentMinAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentMaxAmount")]
        public int? PaymentMaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("historicalBalanceCheckTimeSpan")]
        public TimeSpan HistoricalBalanceCheckTimeSpan { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentMaxCountPerPeriod")]
        public System.Collections.Generic.ICollection<CountPerTimeSpan> PaymentMaxCountPerPeriod { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSpan
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticks")]
        public long? Ticks { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("days")]
        public int? Days { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hours")]
        public int? Hours { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("milliseconds")]
        public int? Milliseconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minutes")]
        public int? Minutes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seconds")]
        public int? Seconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalDays")]
        public double? TotalDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalHours")]
        public double? TotalHours { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMilliseconds")]
        public double? TotalMilliseconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMinutes")]
        public double? TotalMinutes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalSeconds")]
        public double? TotalSeconds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountPerTimeSpan
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeSpan")]
        public TimeSpan TimeSpan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AisConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("routes")]
        public System.Collections.Generic.ICollection<AisProviderRoute> Routes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastSyncDifferenceTimeSpan")]
        public TimeSpan LastSyncDifferenceTimeSpan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AisProviderRoute
    {

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        public string Bic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providers")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Providers> Providers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostedPagesConfigurationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("styles")]
        public HostedPagesConnectorStylesDto Styles { get; set; }

        /// <summary>
        /// "ACCOUNT_HOLDER" | "COMPANY_NAME" | "FIRST_AND_LAST_NAME"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requiredNameField")]
        public string RequiredNameField { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hideAllInputs")]
        public bool? HideAllInputs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostedPagesConnectorStylesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("logoUrl")]
        public string LogoUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryColor")]
        public string PrimaryColor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("backgroundColor")]
        public string BackgroundColor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borderRadius")]
        public string BorderRadius { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenIoConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseApiUri")]
        public string BaseApiUri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]
        public string PublicKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webAppUriTemplate")]
        public string WebAppUriTemplate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberId")]
        public string MemberId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberAliasType")]
        public string MemberAliasType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customizationId")]
        public string CustomizationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("validateSignature")]
        public string ValidateSignature { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinTsConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("riskApiKey")]
        public string RiskApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicMandateConfigurationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("amounts")]
        public System.Collections.Generic.ICollection<DynamicMandateAmountDto> Amounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicMandateAmountDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]
        public string ApprovalBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public int? Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("creditorStreetNameAndNumber")]
        public string CreditorStreetNameAndNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditorPostalCodeCity")]
        public string CreditorPostalCodeCity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchantLogo")]
        public string MerchantLogo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged connector list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetConnectorsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of connectors.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectors")]
        public System.Collections.Generic.ICollection<Connector> Connectors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the CreateCustomer request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCustomerHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public Customer Customer { get; set; } = new Customer();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged customer list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomersHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of customers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        public System.Collections.Generic.ICollection<Customer> Customers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetCustomer request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomerHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public Customer Customer { get; set; } = new Customer();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the CreateHostedPage request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateHostedPageHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]
        public HostedPage HostedPage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a HostedPage object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostedPage
    {
        /// <summary>
        /// The unique identifier of this hosted page object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this hosted page object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The hosted page is created and its id can be immediately used in subsequent calls to the API.
        /// <br/>* pending - The hosted page is currently displayed to the customer.
        /// <br/>* success - The hosted page workflow finished successfully.
        /// <br/>* failed - The hosted page workflow failed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// One of:
        /// <br/> * CreateMandate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the cause for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]
        public string Cause { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the reason code for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the trigger for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trigger")]
        public string Trigger { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the token for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a mandate object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mandate
    {
        /// <summary>
        /// The unique identifier of this mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate object replacing this mandate object.
        /// <br/>Optional. Only filled, when this mandate has been replaced by another mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("replacedByMandateId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReplacedByMandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("replacedByMandate")]
        public Mandate ReplacedByMandate { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this mandate object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The mandate is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this mandate object gets active.
        /// <br/>* pendingApproval - The mandate requires the approval by the customer (e.g. email and sms mandates).
        /// <br/>* pendingSecondaryApproval - The mandate requires an additional approval (e.g. permission from a second signatory),
        /// <br/>and that approval is pending.
        /// <br/>* pendingReview - The review of the mandate by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines paymentMandateReview.enabled as true.
        /// <br/>* pendingSubmission - The mandate has not yet been submitted to the customer’s bank.
        /// <br/>* submitted - The mandate has been submitted to the customer’s bank, but has not been processed yet.
        /// <br/>* active - The mandate has been successfully set up.
        /// <br/>* failed - The mandate could not be set up.
        /// <br/>* discarded - The mandate has been discarded.
        /// <br/>* expired - The mandate has expired due to dormancy.
        /// <br/>* replaced - The mandate has been replaced by a new mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// The Direct Debit payment scheme this mandate and all dependent
        /// <br/>payments belong to. One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Scheme { get; set; }

        /// <summary>
        /// The unique reference of this mandate. Length and format dependent
        /// <br/>on regulations defined by the determined payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The type of this mandate. One of:
        /// <br/>* single - The mandate can be used for a single payment. It will expire after the first payment or after a period
        /// <br/>of dormancy as defined by the payment scheme.
        /// <br/>* recurring - The mandate can be used for an unlimited number of payments. It will expire after a period of
        /// <br/>dormancy as defined by the payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the generated mandate. This field is only filled, when the
        /// <br/>mandate generation feature is enabled in the merchant connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateUrl")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string MandateUrl { get; set; }

        /// <summary>
        /// The URL of the generated mandate setup confirmation. This field is only filled, when the
        /// <br/>mandate setup confirmation generation feature is enabled in the merchant connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateSetupConfirmationUrl")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string MandateSetupConfirmationUrl { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// Optional. Mark this mandate as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* click - Click mandate. The mandate is approved by ticking a check box and/or clicking an approve button on the web page.
        /// <br/>* email - Email mandate. The customer is sent an email containing a secret Tan and/or a link to click. The customer
        /// <br/>email address has to be filled.
        /// <br/>* sms - SMS mandate. The customer is sent a sms containing a secret Tan. The customer cellphone number has to be
        /// <br/>filled.
        /// <br/>* ais - Account Information Service mandate. The mandate is approved by using a PSD2 AIS account check via the internet
        /// <br/>banking of the customer's bank. When the amount and currency are also given in this request an additional balance check
        /// <br/>is executed.
        /// <br/>* dynamic - Dynamic mandate management. The mandate type is managed by SEPA.express based on configured parameters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]
        public string ApprovalBy { get; set; }

        /// <summary>
        /// ApprovalDate is an optional field that indicates when the mandate was signed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]
        public System.DateTimeOffset? ApprovalDate { get; set; }

        /// <summary>
        /// The ISO 4217 currency code. used mainly for AIS mandate with Balance Check
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The max allowable amount to collect from the customer's bank account for this mandate.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique identifier of the hosted page this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostedPageId")]
        public string HostedPageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]
        public HostedPage HostedPage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a payment object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment
    {
        /// <summary>
        /// The unique identifier of this payment object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this payment object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The payment is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this payment object gets paid.
        /// <br/>* pendingApproval - The payment requires the approval by the customer.
        /// <br/>* pendingReview - The review of the payment by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines paymentsNeedReview as true.
        /// <br/>* pendingSubmission - The payment has not yet been submitted toward the customer's bank.
        /// <br/>* submitted - The payment has been submitted toward the customer's bank, but the processing has not been finished
        /// <br/>yet.
        /// <br/>* paid - The payment has been successfully collected from the customer.
        /// <br/>* failed - The payment could not be set up.
        /// <br/>* discarded - The payment has been discarded.
        /// <br/>* chargedBack - The payment has been charged back by the customer’s bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to collect from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The unique reference of this payment. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme. Often called End2EndId in the SEPA scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payment. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// The number of requested refunds for this payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundCount")]
        public int? RefundCount { get; set; }

        /// <summary>
        /// The amount of all requested refunds for this payment.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundAmount")]
        public int? RefundAmount { get; set; }

        /// <summary>
        /// Defines, when this payment should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payments will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The URL of the generated payment pre notification. This field is only filled, when the
        /// <br/>payment pre notification generation feature is enabled in the merchant connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentPreNotificationUrl")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string PaymentPreNotificationUrl { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding iban from the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]
        public string ValidationMerchantId { get; set; }

        /// <summary>
        /// Optional. Mark this payment as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* ais - Account Information Service mandate. The payment is approved by using a PSD2 AIS account check via the internet
        /// <br/>banking of the customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]
        public string ApprovalBy { get; set; }

        /// <summary>
        /// ApprovalDate is an optional field that indicates when the payment was signed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]
        public System.DateTimeOffset? ApprovalDate { get; set; }

        /// <summary>
        /// The unique identifier of the hosted page this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostedPageId")]
        public string HostedPageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]
        public HostedPage HostedPage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged customer list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetHostedPagesHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of HostedPages.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostedPages")]
        public System.Collections.Generic.ICollection<HostedPage> HostedPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetHostedPage request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetHostedPageHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]
        [System.ComponentModel.DataAnnotations.Required]
        public HostedPage HostedPage { get; set; } = new HostedPage();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for GetLocalizationText list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLocalizationTextHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("localizationText")]
        [System.ComponentModel.DataAnnotations.Required]
        public LocalizationText LocalizationText { get; set; } = new LocalizationText();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a mandate object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalizationText
    {
        /// <summary>
        /// The unique identifier of this mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("languageCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string LanguageCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged mandate list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMandatesHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of mandates.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandates")]
        public System.Collections.Generic.ICollection<Mandate> Mandates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged mandate list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResendMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscardMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReinstateMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetMerchant request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMerchantHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        [System.ComponentModel.DataAnnotations.Required]
        public Merchant Merchant { get; set; } = new Merchant();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePaymentHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public Error Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged payment list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPaymentsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of payments.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetPayment request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPaymentHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewPaymentHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePayoutHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payout Payout { get; set; } = new Payout();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a payout object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payout
    {
        /// <summary>
        /// The unique identifier of this payout object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this payout object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The payout is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this payout object gets active.
        /// <br/>* pendingReview - The review of the payout by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines payoutsNeedReview as true.
        /// <br/>* pendingSubmission - The payout has not yet been submitted toward the customer's bank.
        /// <br/>* submitted - The payout has been submitted toward the customer's bank, but the processing has not been finished
        /// <br/>yet.
        /// <br/>* paid - The payout has been successfully collected from the customer.
        /// <br/>* failed - The payout could not be set up.
        /// <br/>* discarded - The payout has been discarded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to collect from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this payout. This id is used for matching
        /// <br/>payouts and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payout scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payout. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payout scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this payout should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payouts will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding iban from the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged payout list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPayoutsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of payouts.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payouts")]
        public System.Collections.Generic.ICollection<Payout> Payouts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetPayout request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPayoutHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payout Payout { get; set; } = new Payout();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewPayoutHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payout Payout { get; set; } = new Payout();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetReconciliation request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetReconciliationHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("reconciliation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reconciliation Reconciliation { get; set; } = new Reconciliation();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a reconciliation object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reconciliation
    {
        /// <summary>
        /// The unique identifier of this reconciliation object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        public Payout Payout { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this reconciliation object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The entity this reconciliation belongs to. One of:
        /// <br/>* payment
        /// <br/>* payout
        /// <br/>* refund
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entity")]
        public string Entity { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* paid
        /// <br/>* failed
        /// <br/>* discarded
        /// <br/>* chargedBack
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 13616 international bank account number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount of the transaction.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this transaction. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme. Often called End2EndId in the SEPA scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// The unique transaction id of this transaction defined by the PSP.
        /// <br/>Optional, but highly recommended to use.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// The booking date equals the settlement date on the bank account and
        /// <br/>is important for accounting and reconciliation. The value date can
        /// <br/>be one day later.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        public System.DateTimeOffset? BookingDate { get; set; }

        /// <summary>
        /// What triggered this reconciliation entry. Optional. Only
        /// <br/>filled when a bank report is the origin of this reconciliation
        /// <br/>entry.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]
        public string Cause { get; set; }

        /// <summary>
        /// The payment scheme this reconciliation belongs to. Optional. Only
        /// <br/>filled when a bank report is the origin of this reconciliation.
        /// <br/>entry. One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// The reason code. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The trigger. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trigger")]
        public string Trigger { get; set; }

        /// <summary>
        /// The token. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// The info for this reconciliation. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("info")]
        public string Info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a refund object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Refund
    {
        /// <summary>
        /// The unique identifier of this refund object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The unique identifier of the connector this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The unique identifier of the customer this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        public string MandateId { get; set; }

        /// <summary>
        /// The unique identifier of the payment this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this refund object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The refund is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this refund object gets active.
        /// <br/>* pendingReview - The review of the refund by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines refundsNeedReview as true.
        /// <br/>* pendingSubmission - The refund has not yet been submitted toward the customer's bank.
        /// <br/>* submitted - The refund has been submitted toward the customer's bank, but the processing has not been finished
        /// <br/>yet.
        /// <br/>* paid - The refund has been successfully paid to the customer.
        /// <br/>* failed - The refund could not be set up.
        /// <br/>* discarded - The refund has been discarded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to refund to the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this refund. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this refund. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used refund scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this refund should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Refunds will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged reconciliation list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetReconciliationsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of reconciliations.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliations")]
        public System.Collections.Generic.ICollection<Reconciliation> Reconciliations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRefundHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        [System.ComponentModel.DataAnnotations.Required]
        public Refund Refund { get; set; } = new Refund();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged refund list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRefundsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]
        public System.Collections.Generic.ICollection<Refund> Refunds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetRefund request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRefundHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        [System.ComponentModel.DataAnnotations.Required]
        public Refund Refund { get; set; } = new Refund();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewRefundHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        [System.ComponentModel.DataAnnotations.Required]
        public Refund Refund { get; set; } = new Refund();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetProcess request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetProcessHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public Process Process { get; set; } = new Process();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a process object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Process
    {
        /// <summary>
        /// The unique identifier of this process object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this process object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Process’s type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// Process’s origin
        /// <br/>One of:
        /// <br/>* Api 
        /// <br/>* Bank
        /// <br/>* Internal 
        /// <br/>* User
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Origin { get; set; }

        /// <summary>
        /// Process’s name. 
        /// <br/>One of:
        /// <br/>* Http 
        /// <br/>* Queue
        /// <br/>* Timer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged process list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetProcessesHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of processes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processes")]
        public System.Collections.Generic.ICollection<Process> Processes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetProcessEvent request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetProcessEventHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("processEvent")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProcessEvent ProcessEvent { get; set; } = new ProcessEvent();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a process event object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessEvent
    {
        /// <summary>
        /// The unique identifier of this process event object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        public Payout Payout { get; set; }

        /// <summary>
        /// The unique identifier of the process this process event object
        /// <br/>belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("process")]
        public Process Process { get; set; }

        /// <summary>
        /// The unique identifier of the reconciliation this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReconciliationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciliation")]
        public Reconciliation Reconciliation { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this process event object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The type of this process event object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Type { get; set; }

        /// <summary>
        /// What triggered this process event. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]
        public string Cause { get; set; }

        /// <summary>
        /// The reason code. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The description. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The recommended action. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// The best practice to follow. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bestPractice")]
        public string BestPractice { get; set; }

        /// <summary>
        /// The data of this process event. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged webhook event list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetProcessEventsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of processEvents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processEvents")]
        public System.Collections.Generic.ICollection<ProcessEvent> ProcessEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetWebhook request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWebhookHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        [System.ComponentModel.DataAnnotations.Required]
        public Webhook Webhook { get; set; } = new Webhook();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a web hook object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Webhook
    {
        /// <summary>
        /// The unique identifier of this web hook object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this web hook object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The web hook is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this webhook object gets active.
        /// <br/>* active - The web hook has been successfully set up.
        /// <br/>* failed - The web hook could not be set up.
        /// <br/>* discarded - The web hook has been discarded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; }

        /// <summary>
        /// The URL of the server that will receive the web hook POST requests.
        /// <br/>Only HTTPS endpoints supporting TLS 1.2 are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Setting a web hook secret allows you to ensure that POST requests
        /// <br/>sent to the configured URL are from SEPAexpress. When you set a
        /// <br/>secret, you'll receive the X-Hub-Signature header in the web hook
        /// <br/>POST request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("secret")]
        public string Secret { get; set; }

        /// <summary>
        /// Set additional HTTP headers in the web hook request.  Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalHeaders")]
        public System.Collections.Generic.ICollection<Header> AdditionalHeaders { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("configuration")]
        public WebhookConfiguration Configuration { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Header
    {
        /// <summary>
        /// The header name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Name { get; set; }

        /// <summary>
        /// The header name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request DTO for the CreateWebhook request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("merchants")]
        public System.Collections.Generic.ICollection<string> Merchants { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectors")]
        public System.Collections.Generic.ICollection<string> Connectors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventTypes")]
        public System.Collections.Generic.ICollection<string> EventTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeMerchant")]
        public bool? IncludeMerchant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeConnector")]
        public bool? IncludeConnector { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeCustomer")]
        public bool? IncludeCustomer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeBankAccount")]
        public bool? IncludeBankAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeMandate")]
        public bool? IncludeMandate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includePayment")]
        public bool? IncludePayment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includePayout")]
        public bool? IncludePayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeProcess")]
        public bool? IncludeProcess { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeReconciliation")]
        public bool? IncludeReconciliation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeRefund")]
        public bool? IncludeRefund { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged web hook list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWebhooksHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of web hooks.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhooks")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Webhook> Webhooks { get; set; } = new System.Collections.ObjectModel.Collection<Webhook>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetWebhookEvent request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWebhookEventHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhookEvent")]
        [System.ComponentModel.DataAnnotations.Required]
        public WebhookEvent WebhookEvent { get; set; } = new WebhookEvent();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a webhookEvent object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookEvent
    {
        /// <summary>
        /// The unique identifier of this webhookEvent object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this webhookEvent object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Is Webhook event Successfully Transmitted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isSuccessfullyTransmitted")]
        public bool? IsSuccessfullyTransmitted { get; set; }

        /// <summary>
        /// count of transmission
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transmissionCount")]
        public int? TransmissionCount { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        public Payout Payout { get; set; }

        /// <summary>
        /// The unique identifier of the process this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("process")]
        public Process Process { get; set; }

        /// <summary>
        /// The unique identifier of the processEvent this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processEventId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processEvent")]
        public ProcessEvent ProcessEvent { get; set; }

        /// <summary>
        /// The unique identifier of the reconciliation this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReconciliationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciliation")]
        public Reconciliation Reconciliation { get; set; }

        /// <summary>
        /// The unique identifier of the webhook this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string WebhookId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        public Webhook Webhook { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged webHookEvent list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWebhookEventsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of webhookEvents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookEvents")]
        public System.Collections.Generic.ICollection<WebhookEvent> WebhookEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetWebhookEventTransmission request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWebhookEventTransmissionHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhookEventTransmission")]
        [System.ComponentModel.DataAnnotations.Required]
        public WebhookEventTransmission WebhookEventTransmission { get; set; } = new WebhookEventTransmission();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a webhookEventTransmission object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookEventTransmission
    {
        /// <summary>
        /// The unique identifier of this webhookEventTransmission object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this webhookEventTransmission object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        public int? StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data Data { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        public Payout Payout { get; set; }

        /// <summary>
        /// The unique identifier of the process this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("process")]
        public Process Process { get; set; }

        /// <summary>
        /// The unique identifier of the webhookEvent this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processEventId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processEvent")]
        public ProcessEvent ProcessEvent { get; set; }

        /// <summary>
        /// The unique identifier of the reconciliation this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReconciliationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationEvent")]
        public Reconciliation ReconciliationEvent { get; set; }

        /// <summary>
        /// The unique identifier of the webhook this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string WebhookId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        public Webhook Webhook { get; set; }

        /// <summary>
        /// The unique identifier of the webhook event this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookEventId")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string WebhookEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webhookEvent")]
        public Webhook WebhookEvent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {

        [System.Text.Json.Serialization.JsonPropertyName("httpRequest")]
        public HttpRequest HttpRequest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpResponse")]
        public HttpResponse HttpResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("requestUrl")]
        public string RequestUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("headers")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Headers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cookies")]
        public System.Collections.Generic.IDictionary<string, string> Cookies { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        public string HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public object Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        public int? StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public object Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged webHookEventTransmission list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWebhookEventTransmissionsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of webHookEventTransmissions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookEventTransmissions")]
        public System.Collections.Generic.ICollection<WebhookEventTransmission> WebhookEventTransmissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Providers
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TokenIo")]
        TokenIo = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FinTs")]
        FinTs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FinTsRisk")]
        FinTsRisk = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603